[
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#视频介绍",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#视频介绍",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "视频介绍",
    "text": "视频介绍\n哈喽哈喽大家好，我们今天从plotly.express入手，给大家展示下如何用python来绘制高颜值的交互式可视化图表。\n像我们上期视频介绍的一样，Plotly Express 是一个高级 Python 可视化库：它是 Plotly.py 的高级封装。最大的特点就是，它能用非常简单的语法绘制一个复杂的图表，其内置了大量实用且精美的绘图模板，我们只需调用简单的函数，即可快速生成交互图表。"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#安装和导入",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#安装和导入",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "安装和导入",
    "text": "安装和导入\nplotly.express 是 plotly python包里面的常规内容，所以最简单的安装方式就是 pip install plotly\n使用的时候 直接import plotly.express as px，因为他封装的很好，所以基本上我们只需要一个px 就能绘制任意图表。这一点会比pyecharts方便很多。也是我推荐给新手朋友们的理由之一\n\nimport plotly.express as px\nimport pandas as pd\n\n今天就先从散点图，折线图、柱状图、饼图和气泡图，这五个最基础的图例开始吧。"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#数据展示",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#数据展示",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "数据展示",
    "text": "数据展示\n比较方便的是plotly里面内置了几个数据集，可以方便我们进行尝试，比如这个 Gapminder 数据集，里面包含各个国家或地区的人口和GDP以及年份。\n\ngapminder = px.data.gapminder()\ngapminder\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      0\n      Afghanistan\n      Asia\n      1952\n      28.801\n      8425333\n      779.445314\n      AFG\n      4\n    \n    \n      1\n      Afghanistan\n      Asia\n      1957\n      30.332\n      9240934\n      820.853030\n      AFG\n      4\n    \n    \n      2\n      Afghanistan\n      Asia\n      1962\n      31.997\n      10267083\n      853.100710\n      AFG\n      4\n    \n    \n      3\n      Afghanistan\n      Asia\n      1967\n      34.020\n      11537966\n      836.197138\n      AFG\n      4\n    \n    \n      4\n      Afghanistan\n      Asia\n      1972\n      36.088\n      13079460\n      739.981106\n      AFG\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1699\n      Zimbabwe\n      Africa\n      1987\n      62.351\n      9216418\n      706.157306\n      ZWE\n      716\n    \n    \n      1700\n      Zimbabwe\n      Africa\n      1992\n      60.377\n      10704340\n      693.420786\n      ZWE\n      716\n    \n    \n      1701\n      Zimbabwe\n      Africa\n      1997\n      46.809\n      11404948\n      792.449960\n      ZWE\n      716\n    \n    \n      1702\n      Zimbabwe\n      Africa\n      2002\n      39.989\n      11926563\n      672.038623\n      ZWE\n      716\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n      ZWE\n      716\n    \n  \n\n1704 rows × 8 columns\n\n\n\n为了方便绘制第一个的散点图，我们先选定，2007年，使用query将数据从表格中提取出来。\n\ngapminder2007 = gapminder.query('year == 2007')\ngapminder2007\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      11\n      Afghanistan\n      Asia\n      2007\n      43.828\n      31889923\n      974.580338\n      AFG\n      4\n    \n    \n      23\n      Albania\n      Europe\n      2007\n      76.423\n      3600523\n      5937.029526\n      ALB\n      8\n    \n    \n      35\n      Algeria\n      Africa\n      2007\n      72.301\n      33333216\n      6223.367465\n      DZA\n      12\n    \n    \n      47\n      Angola\n      Africa\n      2007\n      42.731\n      12420476\n      4797.231267\n      AGO\n      24\n    \n    \n      59\n      Argentina\n      Americas\n      2007\n      75.320\n      40301927\n      12779.379640\n      ARG\n      32\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1655\n      Vietnam\n      Asia\n      2007\n      74.249\n      85262356\n      2441.576404\n      VNM\n      704\n    \n    \n      1667\n      West Bank and Gaza\n      Asia\n      2007\n      73.422\n      4018332\n      3025.349798\n      PSE\n      275\n    \n    \n      1679\n      Yemen, Rep.\n      Asia\n      2007\n      62.698\n      22211743\n      2280.769906\n      YEM\n      887\n    \n    \n      1691\n      Zambia\n      Africa\n      2007\n      42.384\n      11746035\n      1271.211593\n      ZMB\n      894\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n      ZWE\n      716\n    \n  \n\n142 rows × 8 columns"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#散点图",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#散点图",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "散点图",
    "text": "散点图\n假设我们想要知道各个国家/地区的人均预期寿命和人均GDP 之间的关系，我们就可以通过这么一行代码，绘制基础的散点图，其中px就是plotly.express这个大家肯定知道。那scatter就是散点图，括号里面，我们肯定是要先提供数据才能画图的麻，所以gapminder2007，然后需要x y轴，也就是我们想知道的人均预期寿命和人均GDP。 短短一行代码就能画图，是不是特别神奇？\n\npx.scatter(gapminder2007, x = 'gdpPercap', y = 'lifeExp')\n\n\n                                                \n\n\n\n颜色\n如果你想通过大陆区分它们，你可以使用 color 参数为你的点着色，由 px 负责设置默认颜色，设置图例等：\n\npx.scatter(gapminder2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent')\n\n\n                                                \n\n\n这样就能通过不同的颜色来区分不同的大陆，可以看到鼠标悬停和点击都是有不错的交互效果\n\n\n大小(气泡图)\n如果还想查看各个国家的总人口，怎么加好看点呢？我们可以使用size参数，人口越多这个点就越大。所以我们也称之为气泡图，bubble chart\n\npx.scatter(gapminder2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max = 60)\n\n\n                                                \n\n\n\n\n子图\n也可以通过 facet_col =”continent“ 来轻松划分各大洲，并且我们可以使用 x轴的对数（log_x）以便在我们在图表中看的更加清晰\n\npx.scatter(gapminder2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max = 60, facet_col = 'continent', log_x = True)"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#animation",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#animation",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "animation",
    "text": "animation\n那这些都只是2007年的数据，我想查看从1952到2007的所有时间该怎么做呢？我们可以加入一条时间线，玩点高级的，让这些气泡随着时间变化而变化，让数据“动”起来。\n这个组件也很简单，我们先把数据换成完整的数据集，gapminder。 然后在后面添加 animation_frame =year ，根据时间来变化，然后animation group = country，国家也就是这些气泡。 然后别忘了还要修改x 轴和 y轴的范围，不然数值可能会过大或着过小\n\npx.scatter(gapminder, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max = 60, log_x = True, \n           animation_frame = 'year', animation_group = 'country', range_x = [100, 100000], range_y = [25, 90]\n           )\n\n\n                                                \n\n\n运行看看，还是十分丝滑顺畅的。我们把facet去掉，合并起来再看下，嗯不错，比静态图表高级多了。"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#线形图",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#线形图",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "线形图",
    "text": "线形图\n第二个是线形图，也是大家见过最多的图表之一，他比较适合连续数据，特别是时间序列。线形图可以帮助我们关注趋势的起伏波动, 就像刚才提到的年份一样，从1952年到2007年到一个时间数据。我们先来尝试画一条线形图，以单个国家 美国为例，将美国从数据集中取出。\n\ngapminderUSA = px.data.gapminder().query(\"country == 'United States'\")\ngapminderUSA\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      1608\n      United States\n      Americas\n      1952\n      68.440\n      157553000\n      13990.48208\n      USA\n      840\n    \n    \n      1609\n      United States\n      Americas\n      1957\n      69.490\n      171984000\n      14847.12712\n      USA\n      840\n    \n    \n      1610\n      United States\n      Americas\n      1962\n      70.210\n      186538000\n      16173.14586\n      USA\n      840\n    \n    \n      1611\n      United States\n      Americas\n      1967\n      70.760\n      198712000\n      19530.36557\n      USA\n      840\n    \n    \n      1612\n      United States\n      Americas\n      1972\n      71.340\n      209896000\n      21806.03594\n      USA\n      840\n    \n    \n      1613\n      United States\n      Americas\n      1977\n      73.380\n      220239000\n      24072.63213\n      USA\n      840\n    \n    \n      1614\n      United States\n      Americas\n      1982\n      74.650\n      232187835\n      25009.55914\n      USA\n      840\n    \n    \n      1615\n      United States\n      Americas\n      1987\n      75.020\n      242803533\n      29884.35041\n      USA\n      840\n    \n    \n      1616\n      United States\n      Americas\n      1992\n      76.090\n      256894189\n      32003.93224\n      USA\n      840\n    \n    \n      1617\n      United States\n      Americas\n      1997\n      76.810\n      272911760\n      35767.43303\n      USA\n      840\n    \n    \n      1618\n      United States\n      Americas\n      2002\n      77.310\n      287675526\n      39097.09955\n      USA\n      840\n    \n    \n      1619\n      United States\n      Americas\n      2007\n      78.242\n      301139947\n      42951.65309\n      USA\n      840\n    \n  \n\n\n\n\n然后，\n\npx.line(gapminderUSA, x = 'year', y = 'lifeExp', title = 'Life Expectancy in USA')\n\n\n                                                \n\n\n同样px调用line package，数据为刚才的USA， x 轴为时间 year， y 轴 为关心的数值 lifeExp， 顺便设置个title。\n这样就能看到一个大概的趋势，但是具体的年份还不大清楚，那我们就可以加上 markers = True 或者 symbol=\"continent\" 定制这个记号。我们也可以切换线形图的模式，plotly一共有六种模式可选，默认的linear就是折线图，想要丝滑一点的就是splinear\n\npx.line(gapminderUSA, x = 'year', y = 'lifeExp', title = 'Life Expectancy in USA', symbol = 'continent', line_shape = 'spline')"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#柱状图",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#柱状图",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "柱状图",
    "text": "柱状图\n然后当我们需要比较每个类别的值，就会用到柱状图，我们在很多报表中都能看到柱状图，像是销售信息，客户分析或是KPI结果。\n我们拿大洋洲为例，\n\ngapminderOceania = px.data.gapminder().query(\"continent == 'Oceania'\")\ngapminderOceania\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      60\n      Australia\n      Oceania\n      1952\n      69.120\n      8691212\n      10039.59564\n      AUS\n      36\n    \n    \n      61\n      Australia\n      Oceania\n      1957\n      70.330\n      9712569\n      10949.64959\n      AUS\n      36\n    \n    \n      62\n      Australia\n      Oceania\n      1962\n      70.930\n      10794968\n      12217.22686\n      AUS\n      36\n    \n    \n      63\n      Australia\n      Oceania\n      1967\n      71.100\n      11872264\n      14526.12465\n      AUS\n      36\n    \n    \n      64\n      Australia\n      Oceania\n      1972\n      71.930\n      13177000\n      16788.62948\n      AUS\n      36\n    \n    \n      65\n      Australia\n      Oceania\n      1977\n      73.490\n      14074100\n      18334.19751\n      AUS\n      36\n    \n    \n      66\n      Australia\n      Oceania\n      1982\n      74.740\n      15184200\n      19477.00928\n      AUS\n      36\n    \n    \n      67\n      Australia\n      Oceania\n      1987\n      76.320\n      16257249\n      21888.88903\n      AUS\n      36\n    \n    \n      68\n      Australia\n      Oceania\n      1992\n      77.560\n      17481977\n      23424.76683\n      AUS\n      36\n    \n    \n      69\n      Australia\n      Oceania\n      1997\n      78.830\n      18565243\n      26997.93657\n      AUS\n      36\n    \n    \n      70\n      Australia\n      Oceania\n      2002\n      80.370\n      19546792\n      30687.75473\n      AUS\n      36\n    \n    \n      71\n      Australia\n      Oceania\n      2007\n      81.235\n      20434176\n      34435.36744\n      AUS\n      36\n    \n    \n      1092\n      New Zealand\n      Oceania\n      1952\n      69.390\n      1994794\n      10556.57566\n      NZL\n      554\n    \n    \n      1093\n      New Zealand\n      Oceania\n      1957\n      70.260\n      2229407\n      12247.39532\n      NZL\n      554\n    \n    \n      1094\n      New Zealand\n      Oceania\n      1962\n      71.240\n      2488550\n      13175.67800\n      NZL\n      554\n    \n    \n      1095\n      New Zealand\n      Oceania\n      1967\n      71.520\n      2728150\n      14463.91893\n      NZL\n      554\n    \n    \n      1096\n      New Zealand\n      Oceania\n      1972\n      71.890\n      2929100\n      16046.03728\n      NZL\n      554\n    \n    \n      1097\n      New Zealand\n      Oceania\n      1977\n      72.220\n      3164900\n      16233.71770\n      NZL\n      554\n    \n    \n      1098\n      New Zealand\n      Oceania\n      1982\n      73.840\n      3210650\n      17632.41040\n      NZL\n      554\n    \n    \n      1099\n      New Zealand\n      Oceania\n      1987\n      74.320\n      3317166\n      19007.19129\n      NZL\n      554\n    \n    \n      1100\n      New Zealand\n      Oceania\n      1992\n      76.330\n      3437674\n      18363.32494\n      NZL\n      554\n    \n    \n      1101\n      New Zealand\n      Oceania\n      1997\n      77.550\n      3676187\n      21050.41377\n      NZL\n      554\n    \n    \n      1102\n      New Zealand\n      Oceania\n      2002\n      79.110\n      3908037\n      23189.80135\n      NZL\n      554\n    \n    \n      1103\n      New Zealand\n      Oceania\n      2007\n      80.204\n      4115771\n      25185.00911\n      NZL\n      554\n    \n  \n\n\n\n\n用px.bar来调用柱状图，比如说像查看大洋洲这两个国家的历年人口增长。\n就可以像这样一行代码，x为year ， y 为population\n\npx.bar(gapminderOceania, x = 'year', y = 'pop', color = 'country', barmode = 'group')\n\n\n                                                \n\n\n默认是堆叠柱状图，那我们加个color进行区分。如果我们不想用堆叠的话，可以使用barmode 修改为 group，这样就能分开了。"
  },
  {
    "objectID": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#饼图",
    "href": "posts/2022-12-12【Plotly】最基础的五种交互可视化图表/index.html#饼图",
    "title": "【Plotly】最基础的五种交互可视化图表",
    "section": "饼图",
    "text": "饼图\n最后一个是饼图，通常用于表示样本数据，不同数据占比多少之类的。 另外饼图最好在变量较少时使用，不然太多数据的话会挤在一起。\n所以我们改用tips，新的小费数据集，我们可以使用饼图查看周四周五周六日四天的小费占比情况。\n\ntips = px.data.tips()\ntips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n    \n  \n\n244 rows × 7 columns\n\n\n\npx.pie 调用饼图，然后加入数据tips，不同于其他图表，饼图是没有x y轴的，它用的是values，总金额，以及names 为 日期。\n\npx.pie(tips, values = 'total_bill', names = 'day')\n\n\n                                                \n\n\n那我们今天介绍的这五款基础图表都是能直接用express绘制的，不需要任何其他的包。大家可以用自己的数据多尝试一下，有什么问题欢迎在评论区留言，感谢收看 谢谢大家！"
  },
  {
    "objectID": "posts/史上最安全的SSH自动部署全流程/index.html#视频介绍",
    "href": "posts/史上最安全的SSH自动部署全流程/index.html#视频介绍",
    "title": "史上最安全的SSH自动部署 全流程",
    "section": "视频介绍",
    "text": "视频介绍\n上期视频我们聊到了如何自动化部署静态网站，用的是GitHub Pages和Actions，可以在本地修改文章然后自动部署到网站。今天介绍另一种适用更加广泛的方法，就是自动化部署到自己的服务器，同时使用SSH，提高安全性。我会拿部署Nginx作为一个案例分享，但其实有了服务器之后，也可以用这个方法部署app应用，能做的事情就太多了。\n\n以Nginx为案例\n\n本地使用docker 创建nginx作为案例\nlocalhost 打开网页\n创建新的GitHub项目，并同步至本地nginx\n\n\n\n创建GitHub仓库\n创建一个GitHub仓库，并与本地关联起来，存储我们的代码文件。将git指令复制到github文件夹后， 左下角显示main就代表连接成功了。\n\n\nGitHub Actions 自动提交代码\n创建.github/workflows/ssh.yml文件 其中内容为：\n\nname相当于起了一个名字，这个名字可以在部署的时候看的到；只要能看出部署到了哪一步就可以。on表示触发条件，这里是push的时候会触发，也就是我们推送代码的时候触发这个workflow。\n我们再往下看，jobs表示执行的任务，一个workflow可以有多个任务。\n再下面runs-on表示运行环境，这里用的是最新的ubuntu系统。steps是任务中具体的步骤，里面的每一个-代表了一个action，其中action也可以有自己的name，也可以使用uses，使用别人写好的action。这里用的就是appleboy的一个ssh-action。\n接下来的secrets.HOST，username， key这些，就是我们跟GitHub关联的，服务器IP地址，服务器名称，密钥。这里等下服务器连接GitHub的时候会用到。\n另外一个很重要的就是我们实际上需要什么动作，就是在script下面进行添加的。比如我这里cd到这个文件夹中，然后git pull。意思连接服务器后，去到服务器下的这个文件夹，然后自动同步我上传到GitHub的内容。\n\n\n\n使用ssh设置的密钥\n先创建一个.ssh文件夹，所有密钥都需要放在这里。然后使用ssh-keygen命令，其中-t是指定选用ed25519类型，不然默认就是rsa。-C 则是提供一个注释，我这边加的是GitHub账户的邮箱。 然后一直回车就行，分别是让你更改文件名和添加一个“解锁口令”，我们可以先不用管。\n一共是有两个密钥，一个是私钥，放在服务器上，需要自己藏起来不会泄漏出去的；另一个.pub的是公钥，可以放在GitHub上是可以任意的对外发布的\n为了GitHub弄明白密钥在哪，我们还需要把公钥，也就是.pub的这个，放到一个叫authorized_keys的文件夹中进行认证，没有的话创建一个。\n\n\nGitHub 配置 ssh\n\n在设置中的 deploy key 添加id_ed25519.pub 公钥；\n在下面的secrets中添加之前在yml文件中定义的三个，host, username, key。这里特别注意的是，KEY 添加的是id_ed25519 这个私钥。\n\n这样服务器和GitHub都有了对应的密钥，使用git clone ssh链接克隆下来之后，我们的自动化部署动作还没结束，来到yml文件中，需要确认是cd到自己服务器中的这个文件夹。如果大家连接出现问题的话，可以留意下.ssh/中有没有known_hosts，或者尝试重新git pull"
  },
  {
    "objectID": "posts/程序员的写作新福音--Quarto/超详细创建阿里云服务器/index.html#视频介绍",
    "href": "posts/程序员的写作新福音--Quarto/超详细创建阿里云服务器/index.html#视频介绍",
    "title": "程序员的写作新福音–Quarto",
    "section": "视频介绍",
    "text": "视频介绍\n哈喽哈喽，大家好，我是Jack。因为最近在准备研究生的申请，所以想做一个个人网站充当个人门面。稍微了解了下，发现了一个很新的东西（今年七月发布的），也比较适合我。今天就给大家介绍这个 – Quarto 四开门\n\n网站的静态 动态区别说明\n我们知道，网页是分动态和静态的。最简单的区别就是可以有数据库支持的为“动态”，一般像电商、商城，或是一些大企业的网站。 主流的动态网页工具像WordPress，搭建在一个服务器上，会有更加好的交互性。\n另一方面，早期的网站通常都是由静态页面制作的。静态网页的每个网页都有一个固定的URL，所以内容相对稳定，也更容易被搜索引擎检索；\n但静态网站的致命弱点就是不易维护，为了不断更新网页内容，你必须不断地重复制作HTML文档，随着网站内容和信息量的日益扩增，这个工作量就会大得出乎想像。 当然，这个问题我们可以用GitHub Actions 自动部署来搞定。\n那制作静态网页大家一般是用，Hugo、Jekyll、Hexo\n更进一步的集大成者就是大名鼎鼎的Blogdown以及我们的闪耀新星 Quarto。\nBlogdown 就是将 Rmarkdown 与 hugo 相结合，大概流程就是用rmd写博客，用hugo 切换主题，再用 github pages 或者 netgify 部署网站。Rmarkdown的特别之处，就是能够在网页运行代码，而不是简单的复制粘贴。诶 这就很适合我来做分享啊。可以在博客里放上视频，再po点代码做介绍\n\n\nquarto 背景介绍\n那回到我们的主角Quarto，已经开发了Blogdown的Rstudio，为什么又要搞出个Quarto呢？事实上，R Markdown已经存在了10年，虽然RStudio实际可以支持Python啥的，但还是会被认为是R的IDE。jupyter notebook 也一样，现在也支持R，但也被认为是个 Python 的工作平台。这就像是一个刻在DNA里的标签，是消除不掉的。\n而这也是RStudio开发Quarto的原因，虽然quarto是类似于R Markdown的一个发布系统，但不同的是，它不是一个特定的语言库，而是一个外部软件应用。\n最重要的是，Quarto 对于 Python，R，Julia 和 Observable 的支持都非常好。在quarto的官网中可以看到除了RStudio之外，还支持其他主流编辑器。 甚至由于python的流行程度，还把Vscode放在Rstudio的前面。\nQuarto 的初衷是去掉 R Markdown 对 R 的依赖，比如 Python 用户可以用 Jupyter 内核去跑 Python 代码，而不需要绕道先安装 R，用 R 调用 Python。\n\n\nquarto 是什么？\nQuarto 的字面意思是四开本，取其印刷意。它主要基于 TypeScript 开发。\n基本上囊括了所有 R Markdown 的功能（报告、幻灯片、网站、论文、书籍等），同时因为涉及代码，所以用户会多为经常编码的科研用户。但又不会只针对某一语言的用户，因为Quarto可以通过qmd文档的yaml，来自由选择文档代码的语言来编译文档（我全要）\n\n\n优缺点\n而这也是quarto的一大优点。除了对多语言和编辑方式的支持外，quarto也支持多种类型的输出，基本所有Pandoc的支持类型都行。并且在页面的功能上，Quarto 做了很多有助于技术写作的工作\n缺点可能就是知名度还差点意思，毕竟今年七月份才发布的；除此之外，追求朴实无华的quarto在制作网站的专业度这块，可能比不过Hugo，不管是在编译速度还是网站的主题样式，虽然如此，但博客太花里胡哨好像也不大好，这点就见仁见智了。对我这个需求简单的建站小白来说，只需要专注写作本身，其他一切交给Quarto～\n\n\n创建Quarto Blog\n接下来，我们就来看看如何创建一个简单的Quarto blog。\n\n在Vscode拓展中，安装quarto拓展；\nctl+shift+P打开命令面板，执行quarto create project，选择Blog Project;\n打开index.qmd文件，右上角render进行渲染，快捷键为 ctl+shift+K；\n之后即可在post中撰写博客或代码"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "陈俊杰",
    "section": "",
    "text": "Hi，我是Jack Chen，一位刚接触一年编程的“小白”，也是一个视频创作者。\n现在我在一位哈佛大学博士后的团队中工作。我接触了很多技术栈，包括R、Python、SQL，以及docker的容器技术，Tableau和PowerBI的商业智能可视化等等。我也一直致力于向更多的人推广这些工具技术，同时我相信分享的过程会让我对这些技术更加精通。这就是为什么我成为了一个bilibili视频的创作者的原因。\n由于这个身份，我开始积累自己的粉丝，所以我组织了一个有小三百人的社群，这让我认识了更多专门从事大数据，或者对其感兴趣的人。我还会定期邀请行业内的大佬们与我们分享他们的经验。我觉得这些都是非常有意义的事情，既可以让更多的人喜欢上编程，也可以鞭策自己更加努力地学习!"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Jack Chen",
    "section": "",
    "text": "【Plotly】最基础的五种交互可视化图表\n\n\n\n\n\n\n\nplotly\n\n\n可视化\n\n\n\n\n\n\n\n\n\n\n\nDec 12, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n超好用的四款Python可视化库（新手向）\n\n\n\n\n\n\n\nDash\n\n\n\n\n\n\n\n\n\n\n\nDec 5, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n2022四款超火的Python Web框架（新手向）\n\n\n\n\n\n\n\npython app\n\n\nDash\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n超简单的Heroku部署Dash应用（适用大部分应用部署）\n\n\n\n\n\n\n\nDash\n\n\n部署应用\n\n\n\n\n\n\n\n\n\n\n\nNov 21, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nDash – 数据可视化应用神器\n\n\n\n\n\n\n\nDash\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n史上最安全的SSH自动部署 全流程\n\n\n\n\n\n\n\nSSH\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n自动化部署网站–Quarto\n\n\n\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n程序员的写作新福音–Quarto\n\n\n\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nFor循环 解决Tushare调用问题，实战演示！\n\n\n\n\n\n\n\nSQL\n\n\n数据库\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nSQL 分组查询 & Python 可视化\n\n\n\n\n\n\n\nSQL\n\n\n数据库\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n免费金融数据平台——TUSHARE\n\n\n\n\n\n\n\n数据集\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPython连接Postgres数据库详解\n\n\n\n\n\n\n\n数据库\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nSep 19, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n五款数据库连接工具&快速上手pgAdmin\n\n\n\n\n\n\n\n数据库\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n云计算服务是什么？带你了解四家云服务厂商！\n\n\n\n\n\n\n\n阿里云服务器\n\n\n\n\n\n\n\n\n\n\n\nSep 5, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n云计算服务是什么？带你了解四家云服务厂商！\n\n\n\n\n\n\n\n阿里云服务器\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n云计算服务是什么？带你了解四家云服务厂商！\n\n\n\n\n\n\n\n阿里云服务器\n\n\n\n\n\n\n\n\n\n\n\nAug 22, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n想同时拥有两个系统吗？那就快来试试WSL2吧！！！\n\n\n\n\n\n\n\nWSL2\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n快速了解Docker容器技术，成为云计算的‘弄潮儿’！\n\n\n\n\n\n\n\nDocker\n\n\n\n\n\n\n\n\n\n\n\nAug 7, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPostgreSQL-Windows安装过程&解决报错\n\n\n\n\n\n\n\n数据库\n\n\n\n\n\n\n\n\n\n\n\nJul 29, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n对比四款主流关系型数据库\n\n\n\n\n\n\n\n数据库\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】高校数据交互大屏_完整可视化流程\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】数据大屏-简易版\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJul 8, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】钻取地图\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJul 1, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】气泡地图\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】气泡地图\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJun 17, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】五分钟教你制作入门地图\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nJun 11, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n万万没想到之我一个文科生成为了技术流up主\n\n\n\n\n\n\n\n个人介绍\n\n\n\n\n\n\n\n\n\n\n\nMay 31, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【Tableau】官网介绍&下载安装\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\n\nMay 27, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n【BI可视化】国内外4款BI工具优缺点对比\n\n\n\n\n\n\n\nBI可视化\n\n\n\n\n\n\n\n\n\n\n\nMay 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\npyEcharts-数据大屏\n\n\n\n\n\n\n\npyEcharts\n\n\n\n\n\n\n\n\n\n\n\nMay 21, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\npyEcharts-着色地图\n\n\n\n\n\n\n\npyEcharts\n\n\n\n\n\n\n\n\n\n\n\nMay 17, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\npyEcharts-动态条形图\n\n\n\n\n\n\n\npyEcharts\n\n\n\n\n\n\n\n\n\n\n\nMay 15, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\npyEcharts-柱状图&折线图\n\n\n\n\n\n\n\npyEcharts\n\n\n\n\n\n\n\n\n\n\n\nMay 11, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\npyEcharts-旭日图&树状图\n\n\n\n\n\n\n\npyEcharts\n\n\n\n\n\n\n\n\n\n\n\nMay 6, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPandas 数据导入/导出\n\n\n\n\n\n\n\npython\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPandas 基础用法 5分钟了解！！！\n\n\n\n\n\n\n\npython\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPandas 数据结构 简单介绍\n\n\n\n\n\n\n\npython\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nAnaconda 超详细安装\n\n\n\n\n\n\n\nAnaconda\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\nPandas 数据结构 简单介绍\n\n\n\n\n\n\n\npython\n\n\npandas\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n「疫情回落」 —— “我们能否摆脱循环？”\n\n\n\n\n\n\n\n数据集\n\n\ncovid\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\n  \n\n\n\n\n美国疫情日增80万？三个数据网站带你迅速了解！\n\n\n\n\n\n\n\n数据集\n\n\ncovid\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2022\n\n\nJack Chen\n\n\n\n\n\n\nNo matching items"
  }
]